// Generated by data binding compiler. Do not edit!
package com.schema.app.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.databinding.Bindable;
import androidx.databinding.DataBindingUtil;
import androidx.databinding.ViewDataBinding;
import androidx.fragment.app.FragmentContainerView;
import com.schema.app.R;
import com.schema.app.ui.viewmodel.AddEventViewModel;
import java.lang.Deprecated;
import java.lang.Object;

public abstract class ActivityAddEventBinding extends ViewDataBinding {
  @NonNull
  public final Button buttonSave;

  @NonNull
  public final Button buttonSearchAddress;

  @NonNull
  public final Button buttonSetDate;

  @NonNull
  public final Button buttonSetTime;

  @NonNull
  public final Button buttonSkipLocation;

  @NonNull
  public final EditText editTextTitle;

  @NonNull
  public final FragmentContainerView mapFragment;

  @NonNull
  public final TextView textViewSelectedAddress;

  @Bindable
  protected AddEventViewModel mViewmodel;

  protected ActivityAddEventBinding(Object _bindingComponent, View _root, int _localFieldCount,
      Button buttonSave, Button buttonSearchAddress, Button buttonSetDate, Button buttonSetTime,
      Button buttonSkipLocation, EditText editTextTitle, FragmentContainerView mapFragment,
      TextView textViewSelectedAddress) {
    super(_bindingComponent, _root, _localFieldCount);
    this.buttonSave = buttonSave;
    this.buttonSearchAddress = buttonSearchAddress;
    this.buttonSetDate = buttonSetDate;
    this.buttonSetTime = buttonSetTime;
    this.buttonSkipLocation = buttonSkipLocation;
    this.editTextTitle = editTextTitle;
    this.mapFragment = mapFragment;
    this.textViewSelectedAddress = textViewSelectedAddress;
  }

  public abstract void setViewmodel(@Nullable AddEventViewModel viewmodel);

  @Nullable
  public AddEventViewModel getViewmodel() {
    return mViewmodel;
  }

  @NonNull
  public static ActivityAddEventBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot) {
    return inflate(inflater, root, attachToRoot, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.activity_add_event, root, attachToRoot, component)
   */
  @NonNull
  @Deprecated
  public static ActivityAddEventBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot, @Nullable Object component) {
    return ViewDataBinding.<ActivityAddEventBinding>inflateInternal(inflater, R.layout.activity_add_event, root, attachToRoot, component);
  }

  @NonNull
  public static ActivityAddEventBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.activity_add_event, null, false, component)
   */
  @NonNull
  @Deprecated
  public static ActivityAddEventBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable Object component) {
    return ViewDataBinding.<ActivityAddEventBinding>inflateInternal(inflater, R.layout.activity_add_event, null, false, component);
  }

  public static ActivityAddEventBinding bind(@NonNull View view) {
    return bind(view, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.bind(view, component)
   */
  @Deprecated
  public static ActivityAddEventBinding bind(@NonNull View view, @Nullable Object component) {
    return (ActivityAddEventBinding)bind(component, view, R.layout.activity_add_event);
  }
}
